for(i in 1:1){
w <- which(dat_piedmont$MonitoringLocationIdentifier==sites[i])
tmp <- dat_piedmont[w,]
yrs <- unique(tmp$year)
airP <- data.frame(DateTime_UTC=ymd_hms("2020/01/01 00:00:00"), air_kPa = 1, air_temp=1)
for(j in 1:length(yrs)){
advance_loop<- FALSE
tryCatch({
airP_y<-StreamPULSE:::FindandCollect_airpres(tmp$latitude[1], tmp$longitude[1],
ymd_hms(paste0(yrs[j],"/01/01 00:15:00")),
ymd_hms(paste0(yrs[j],"/12/31 23:45:00")))
},error=function(e){
revisit <<-bind_rows(revisit, data.frame(i,j))
advance_loop <<-TRUE
})
if(advance_loop) next
airP <- rbind(airP, airP_y)
}
airP$MonitoringLocationIdentifier<- sites[i]
tmp <- left_join(tmp, airP, by=c("MonitoringLocationIdentifier", "DateTime_UTC"))
dat_piedmont$air_temp_C[w]<- tmp$air_temp
dat_piedmont$airPres_kPa[w]<- tmp$air_kPa
print(paste0(i/length(sites)*100, "% done"))
if(i %% 50 == 0){saveRDS(dat_piedmont, "piedmontWQP_airP.rds")}
}
apply(dat_piedmont, 2, function(x) sum(is.na(x) / length(x)))
###########################################################
# Convert DO data to percent saturation using StreamMetabolizer package
# Pressure must be converted to millibars first: 1 kPa = 10 mbar
dat_piedmont$DO_sat<- calc_DO_sat(dat_piedmont$temp_C, 10*dat_piedmont$airPres_kPa)
library(StreamPULSE)
library(devtools)
.libPaths()
.libPaths()
library(StreamPULSE)
library(devtools)
install.packages("devtools")
library(devools)
library(devools)
library(devtools)
devtools::install_github("streampulse/StreamPulse")
library(StreamPULSE)
tf = tempfile()
download.file("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.txt",
tf, mode = "wb")
noaa.sites <- read.fwf(tf, skip = 22, header = F, widths = c(6,
-1, 5, -45, 8, 9, -8, 9, 8), comment.char = "", col.names = c("USAF",
"WBAN", "LAT", "LON", "BEGIN", "END"), flush = TRUE,
colClasses = c(USAF = "character", WBAN = "character"))
noaa.sites <- na.omit(noaa.sites)
glimpse(noaa.sites)
noaa.sites <- noaa.sites %>% mutate(LAT = as.numeric(as.character(LAT))) %>%
mutate(LON = as.numeric(as.character(LON))) %>% filter(LAT <
(lat + 5) & LAT > (lat - 5) & LON < (long + 5) & LON >
(long - 5))
lat=35
lon=-69
long=-69
long=-79
noaa.sites <- noaa.sites %>% mutate(LAT = as.numeric(as.character(LAT))) %>%
mutate(LON = as.numeric(as.character(LON))) %>% filter(LAT <
(lat + 5) & LAT > (lat - 5) & LON < (long + 5) & LON >
(long - 5))
pt1 <- cbind(rep(long, length.out = length(noaa.sites$LAT)),
rep(lat, length.out = length(noaa.sites$LAT)))
glimpse(noaa.sites)
range(noaa.sites$LAT)
str(pt1)
pt2 <- cbind(noaa.sites$LON, noaa.sites$LAT)
str(pt2)
pt1
pt2
dist <- diag(geosphere::distm(pt1, pt2, fun = geosphere::distHaversine))/1000
dist
range(dist)
noaa.sites$dist <- dist
tmp <- which((as.numeric(substr(noaa.sites$END, 1, 4)) >=
as.numeric(substr(end_datetime, 1, 4))) & as.numeric(substr(noaa.sites$BEGIN,
1, 4)) <= as.numeric(substr(start_datetime, 1, 4)))
# install.packages("dataRetrieval")
library(dataRetrieval) # interact with NWIS and WQP data
library(tidyverse)
blands_siteno <- "02097314"
dat <- readNWISsite(blands_siteno)
dat
dat <- readNWISuv(blands_siteno)
whatNWISdata(blands_siteno)
whatNWISdata(site_no = blands_siteno)
whatNWISdata(siteNumber = blands_siteno)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30)
available_data
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd))
available_data
summary(available_data)
unique(available_data$parm_grp_cd)
unique(available_data$medium_grp_cd)
unique(available_data$data_type_cd)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "qw")
available_data
wq_dat <- readNWISqw(blands_siteno,
parameterCd=available_data$parm_cd)
wq_dat
library(ggplot2)
ggplot(data=wq_dat, aes(x=sample_dt, y=result_va)) +
facet_wrap(parm_cd) +
points()
ggplot(data=wq_dat, aes(x=sample_dt, y=result_va)) +
facet_wrap(parm_cd) +
geom_point()
ggplot(data=wq_dat, aes(x=sample_dt, y=result_va)) +
facet_wrap(wq_dat$parm_cd) +
geom_point()
for(i in unique(wq_dat$parm_cd)){
tmp <- wq_dat[wq_dat$parm_cd==i,]
plot(tmp$sample_dt, tmp$result_va, main = i)
}
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/Hall_50yearslater_NHC")
USGS_codes <- read_csv("USGS_parm_codes.csv")
for(i in unique(wq_dat$parm_cd)){
tmp <- wq_dat[wq_dat$parm_cd==i,]
plot(tmp$sample_dt, tmp$result_va, main = USGS_codes[USGS_codes$parm_cd==i,]$parm_nm)
}
i
USGS_codes[USGS_codes$parm_cd==i,]
USGS_codes
as.numeric(i)
for(i in unique(wq_dat$parm_cd)){
tmp <- wq_dat[wq_dat$parm_cd==i,]
plot(tmp$sample_dt, tmp$result_va, main = USGS_codes[USGS_codes$parm_cd==as.numeric(i),]$parm_nm)
}
unique(available_data$parm_grp_cd)
unique(available_data$data_type_cd)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd))
unique(available_data$data_type_cd)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "uv")
dat <- readNWISdata(blands_siteno,
parameterCd=available_data$parm_cd)
dat <- readNWISuv(blands_siteno,
parameterCd=available_data$parm_cd)
unique(dat$parm_cd)
str(dat)
glimpse(dat)
str(dat)
dim(dat)
attributes(dat)
attributes(dat)->zz
zz$siteInfo
zz
names(zz)
zz$variableInfo
zz$variableInfo$variableCode
str(dat)
colnames(dat)
zz$names
zz$variableInfo
head(dat)
plot(dat$dateTime, dat$X_00065_00000, type="l", log="y")
plot(dat$dateTime, dat$X_00060_00000, type="l", log="y")
plot(dat$dateTime, dat$X_00060_00000, type="l")
plot(dat$dateTime, dat$X_00060_00000, type="l", ylim = c(0,30))
plot(dat$dateTime, dat$X_00060_00000, type="l", ylim = c(0,300))
tmp<- dat[which(!is.na(dat$X_00065_00000)),]
plot(tmp$dateTime, tmp$X_00065_00000, type="l", log="y")
abline(h=2, col="red")
abline(h=3, col="red")
plot(dat$dateTime, dat$X_00060_00000, type="l", log="y")
abline(h=2, col="red")
abline(h=3, col="red")
abline(h=10, col="red")
abline(h=100, col="red")
temp_dat <- readWQPdata(siteid=paste0("USGS-", blands_siteno),
pCode = 00010)
paste0("USGS-", blands_siteno)
temp_dat <- readWQPdata(siteid=paste0("USGS-", blands_siteno),
pCode = "00010")
temp_dat
str(temp_dat)
colnames(temp_dat)
plot(temp_dat$ActivityStartDateTime, temp_dat$ResultMeasureValue)
blands_siteno <- "02097314"
USGS_codes <- read_csv("USGS_parm_codes.csv")
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd))
available_data
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd)) %>%
as_tibble()
available_data
unique(available_data$data_type_cd)
available_data$parm_cd
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "uv") %>%
as_tibble()
available_data
available_data$parm_cd
dat
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "dv") %>%
as_tibble()
available_data$parm_cd
dat_daily <- readNWISdv(blands_siteno,
parameterCd=unique(available_data$parm_cd))
dat_daily
plot(dat_daily$Date, dat_daily$X_00010_00003)
plot(dat_daily$Date, dat_daily$X_00010_00003, type="l")
plot(dat_daily$Date, dat_daily$X_00065_00003, type="l")
plot(dat_daily$Date, dat_daily$X_00060_00003, type="l")
plot(dat_daily$Date, dat_daily$X_00060_00003, type="l", log="y")
plot(dat_daily$Date, dat_daily$X_00065_00003, type="l")
plot(decompose(dat_daily$X_00065_00003))
ts(decompose(dat_daily$X_00065_00003))
dat_daily$X_00065_00003
sum(is.na(dat_daily$X_00065_00003))/nrow(dat_daily)
ts(decompose(dat_daily$X_00065_00003), deltat = 1/365)
ts(dat_daily$X_00065_00003)
ts(dat_daily$X_00065_00003, deltat=1/365)
decompose(ts(dat_daily$X_00065_00003, deltat=1/365))
decompose(ts(na.approx(dat_daily$X_00065_00003), deltat=1/365))
library(zoo)
decompose(ts(na.approx(dat_daily$X_00065_00003), deltat=1/365))
decompose(ts(na.approx(dat_daily$X_00065_00003), deltat=1/365)) -> tmp
tmp
plot(tmp)
USGS_codes
USGS_codes[60,]
USGS_codes %>% filter(parm_cd %in% c(60,65))
decompose(ts(na.approx(dat_daily$X_00060_00003), deltat=1/365)) -> tmp
plot(tmp)
decompose(ts(na.approx(dat_daily$X_00060_00003), deltat=1/365), type="multiplicative") -> tmp
plot(tmp)
decompose(ts(na.approx(log(dat_daily$X_00060_00003)), deltat=1/365)) -> tmp
plot(tmp)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "qw") %>%
as_tibble()
wq_dat <- readNWISdata(blands_siteno,
parameterCd=available_data$parm_cd)
available_data <- whatNWISdata(siteNumber = blands_siteno) %>%
filter(count_nu >= 30, !is.na(parm_cd), data_type_cd == "qw") %>%
as_tibble()
available_data$parm_cd
wq_dat <- readNWISqw(blands_siteno,
parameterCd=available_data$parm_cd)
for(i in unique(wq_dat$parm_cd) ){
tmp <- wq_dat[wq_dat$parm_cd==i,]
plot(tmp$sample_dt, tmp$result_va, main = USGS_codes[USGS_codes$parm_cd==as.numeric(i),]$parm_nm)
}
eno <- "02085070"
eno_q <- readNWISdv(eno,
parameterCd="00060")
decompose(ts(na.approx(log(eno_q$X_00060_00003)), deltat=1/365)) -> tmp
plot(tmp)
library(tidyverse)
library(streamMetabolizer)
setwd(hypox_projdir)
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/Hall_50yearslater_NHC/code")
site_dat <- read_csv("../data/NHCsite_metadata.csv")
site_dat
long <- site_dat$longitude[site_dat$sitecode=="NHC"]
lat <- site_dat$latitude[site_dat$sitecode=="NHC"]
enddat <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"]
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"]
enddate
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
ymd_hms()
library(lubridate)
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
ymd_hms()
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
ymd_hms(format = "%m/%d/%Y %H/%M")
enddate
enddat
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
as.datetime()
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
as.POSIXct()
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
as.POSIXct(format = "%m/%d/%Y %H:%M")
enddate
enddate <- site_dat$enddate.UTC[site_dat$sitecode=="NHC"] %>%
as.POSIXct(format = "%m/%d/%Y %H:%M", tz="UTC")
enddate
startdate <- as.POSIXct("1968-03-18 19:00:00", tz="UTC")
startdate
noaa_dat <- StreamPULSE:::FindandCollect_airpres(lat, long,
startdate,
enddate)
noaa_dat
plot(noaa_dat$DateTime_UTC, noaa_dat$air_temp)
deompose(ts(noaa_dat$air_temp, 1/(365*96)))
decompose(ts(noaa_dat$air_temp, 1/(365*96)))
abline(h=15, col="red")
noaa_dat$date_EST <- with_tz(noaa_dat$DateTime_UTC) %>%
as.Date()
noaa_dat
View(noaa_dat)
View(noaa_dat)
noaa_dat <- noaa_dat %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
select(-DateTime_UTC, -date_EST)
noaa_dat
daily <- noaa_dat %>%
group_by(as.Date(datetime)) %>%
summarize_all(mean)
daily
noaa_dat$date <- as.Date(datetime)
noaa_dat$date <- as.Date(noaa_dat$datetime)
daily <- noaa_dat %>%
select(-datetime)
daily <- noaa_dat %>%
select(-datetime) %>%
group_by(date) %>%
summarize_all(mean)
daily
plot(daily$date, daily$air_temp)
decompose(ts(daily$air_temp, 1/(365)))
decompose(ts(daily$air_temp, deltat = 1/365))
dd <- decompose(ts(daily$air_temp, deltat = 1/365))
plot(dd)
dd <- decompose(ts(daily$air_kPa, deltat = 1/365))
plot(dd)
dd <- decompose(ts(daily$air_temp, deltat = 1/365))
plot(dd)
# Import data from NHC, compare the water temperature to the air temperatures
StreamPULSE::query_available_data("NC","NHC")
nhc <- StreamPULSE::request_data("NC_NHC", variables="WaterTemp_C")
head(nhc)
nhc_mega <- nhc
nhc_mega$data
unique(nhc$data)
unique(nhc$data$flagtype)
nhc_mega$data %>%
filter(flagtype !%in% c("Bad Data","Questionable"))
colnames(nhc$data)
str(nhc$data)
nhc <- nhc_mega$data %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
#  filter(flagtype !%in% c("Bad Data", "Questionable")) %>%
select(datetime, value, variable, flagtype) %>%
pivot_wider(names_from = variable, values_from = value)
nhc
nhc <- nhc_mega$data %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
#  filter(flagtype !%in% c("Bad Data", "Questionable")) %>%
select(datetime, value, variable, flagtype) %>%
pivot_wider(names_from = variable, values_from = value) %>%
as_tibble()
nhc
nhc <- nhc_mega$data %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
#  filter(flagtype !%in% c("Bad Data", "Questionable")) %>%
pivot_wider(names_from = variable, values_from = value) %>%
select(datetime, water_temp = WaterTemp_C, flagtype) %>%
as_tibble()
plot(nhc$datetime, nhc$WaterTemp_C, type="l")
plot(nhc$datetime, nhc$water_temp, type="l")
plot(nhc$datetime, nhc$water_temp, type="l", ylim = c(0,30))
points(nhc$datetime[nhc$flagtype=="Interesting"],
nhc$water_temp[nhc$flagtype=="Interesting"], pch = 21, col="red")
points(nhc$datetime[nhc$flagtype=="Bad Data"],
nhc$water_temp[nhc$flagtype=="Bad Data"], pch = 21, col="blue")
nhc <- nhc_mega$data %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
filter(! flagtype %in% c("Bad Data", "Questionable")) %>%
pivot_wider(names_from = variable, values_from = value) %>%
select(datetime, water_temp = WaterTemp_C, flagtype) %>%
as_tibble()
plot(nhc$datetime, nhc$water_temp, type="l", ylim = c(0,30))
points(nhc$datetime[nhc$flagtype=="Bad Data"],
nhc$water_temp[nhc$flagtype=="Bad Data"], pch = 21, col="blue")
nhc_mega <- StreamPULSE::request_data("NC_NHC", variables="WaterTemp_C")
plot(dd)
dd
nhc <- nhc_mega$data %>%
mutate(datetime = with_tz(DateTime_UTC, tzone="EST")) %>%
filter(! flagtype %in% c("Bad Data", "Questionable")) %>%
pivot_wider(names_from = variable, values_from = value) %>%
select(datetime, water_temp = WaterTemp_C, flagtype) %>%
as_tibble()
plot(nhc$datetime, nhc$water_temp, type="l", ylim = c(0,30))
alldat <- left_join(nhc, noaa_dat, by=datetime)
alldat <- left_join(nhc, noaa_dat, by="datetime")
alldat
plot(nhc$datetime, nhc$WaterTemp_C, )
plot(alldat$air_temp, alldat$water_temp, pch=19)
alldat <- left_join(nhc, noaa_dat, by="datetime")
plot(alldat$air_temp, alldat$water_temp, pch=20)
points(alldat$air_temp[alldat$flagtype == "Interesting"],
alldat$water_temp[alldat$flagtype == "Interesting"],
pch = 20, col = "red")
View(alldat)
noaa_dat$date <- as.Date(noaa_dat$datetime, tz = "EST")
alldat <- left_join(nhc, noaa_dat, by="datetime")
# compare daily temperature means
all_daily <- alldat %>%
select(-datetime, -flagtype) %>%
group_by(date) %>%
summarize_all(mean)
plot(all_daily$air_temp, all_daily$water_temp, pch=20)
dd_nhc <- decompose(ts(all_daily$water_temp, deltat = 1/365))
plot(dd_nhc)
str(dd_nhc)
dd_wat <- decompose(ts(all_daily$water_temp, deltat = 1/365))
plot(dd_wat)
dd_air <- decompose(ts(all_daily$air_temp, deltat = 1/365))
plot(dd_air$trend, dd_wat$trend)
plot(dd_air$trend, type = "l")
lines(dd_wat$trend, lty="2")
plot(dd_air$trend, type = "l", ylim = c(14.8,17.5))
par(new=T)
plot(dd_air$trend, type = "l", ylim = c(14.8,17.5))
lines(dd_wat$trend, lty=2)
plot(dd_air$trend, dd_wat$trend)
lm(dd_wat$trend ~ dd_air$trend)
trendmod <- lm(dd_wat$trend ~ dd_air$trend)
abline(a = trendmod$coefficients[1], b = trendmod$coefficients[2])
abline(a = trendmod$coefficients[1], b = trendmod$coefficients)
trendmod
plot(dd_air$trend, type = "l", ylab = "temp (C)", xlab = "time")
legend("bottomright", c("air", "water"), lty = c(1, 2), lwd = 1.2, border=NA)
plot(dd_air$trend, type = "l", ylab = "temp C", xlab = "time")
lines(dd_wat$trend, lty = 2)
legend("bottomright", c("air", "water"), lty = c(1, 2), lwd = 1.2, bty = "n")
plot(dd_wat)
tail(all_d)
tail(all_daily)
detrended_dat <- data.frame(date = all_daily$date,
wat_trend = dd_wat$trend,
air_trend = dd_air$trend)
plot(dd_air$trend, dd_wat$trend)
which(is.na(detrended_dat$wat_trend))
detrended_dat <- detrended_dat[which(!is.na(detrended_dat$wat_trend)),]
plot(detrended_dat$air_trend, detrended_dat$wat_trend)
trendmod <- lm(detrended_dat$wat_trend ~ detrended_dat$air_trend)
abline(a = trendmod$coefficients[1], b = trendmod$coefficients)
trendmod
trendmod <- lm(detrended_dat$wat_trend ~ detrended_dat$air_trend)
abline(a = trendmod$coefficients[1], b = trendmod$coefficients)
trendmod$coefficients[1]
abline(a = trendmod$coefficients[1], b = trendmod$coefficients[2])
plot(detrended_dat$date, detrended_dat$air_trend,
type = "l", ylab = "temp C", xlab = "date")
lines(detrended_dat$date, detrended_dat$wat_trend, lty = 2)
legend("bottomright", c("air", "water"), lty = c(1, 2), lwd = 1.2, bty = "n")
plot(all_daily$air_temp, all_daily$water_temp, pch=20)
ll <- lm(all_daily$water_temp ~ all_daily$water_temp)
abline(a = ll$coefficients[1], b = ll$coefficients[2])
ll
ll <- lm(all_daily$water_temp ~ all_daily$air_temp)
abline(a = ll$coefficients[1], b = ll$coefficients[2])
trendmod$coefficients[2]
ll$coefficients[2]
ll$coefficients[1]
ll$coefficients[1]/ll$coefficients[2]
# reconstruct relationship removing days where airtemp <=-5 degrees, because
# this is where the watertemp hits 0 according to above relationship
all_daily <- all_daily[all_daily$air_temp > -5,]
plot(all_daily$air_temp, all_daily$water_temp, pch=20)
ll <- lm(all_daily$water_temp ~ all_daily$air_temp)
abline(a = ll$coefficients[1], b = ll$coefficients[2])
ll
2.9358/.7905
# reconstruct relationship removing days where airtemp <=-5 degrees, because
# this is where the watertemp hits 0 according to above relationship
all_daily <- all_daily[all_daily$air_temp > -3.7,]
plot(all_daily$air_temp, all_daily$water_temp, pch=20)
ll <- lm(all_daily$water_temp ~ all_daily$air_temp)
abline(a = ll$coefficients[1], b = ll$coefficients[2])
ll
2.896/.7926
# reconstruct relationship removing days where airtemp <=-5 degrees, because
# this is where the watertemp hits 0 according to above relationship
all_daily <- all_daily[all_daily$air_temp > -3.65,]
plot(all_daily$air_temp, all_daily$water_temp, pch=20)
ll <- lm(all_daily$water_temp ~ all_daily$air_temp)
abline(a = ll$coefficients[1], b = ll$coefficients[2])
# compare daily temperature means
all_daily <- alldat %>%
select(-datetime, -flagtype) %>%
group_by(date) %>%
summarize_all(mean)
plot(detrended_dat$date, detrended_dat$air_trend,
type = "l", ylab = "temp C", xlab = "date")
lines(detrended_dat$date, detrended_dat$wat_trend, lty = 2)
legend("bottomright", c("air", "water"), lty = c(1, 2), lwd = 1.2, bty = "n")
str(dd)
dd$date <- daily$date
plot(dd$date, dd$trend)
dd$wat_trend <- dd$trend * trendmod$coefficients[2] + trendmod$coefficients[1]
plot(dd$date, dd$trend, type = "l")
lines(dd$date, dd$wat_trend, lty = 2)
plot(dd$date, dd$trend, type = "l")
lines(dd$date, dd$wat_trend, col = "blue")
plot(dd$date, dd$trend, type = "l")
lines(detrended_dat$date, detrended_dat$air_trend, col = "red")
plot(detrended_dat$date, detrended_dat$air_trend, col = "red", type = "l")
lines(dd$date, dd$trend, type = "l")
tmp <- left_join(dd, detrended_dat, by = "date")
# nhc_mega <- StreamPULSE::request_data("NC_NHC", variables="WaterTemp_C")
nhc_mega <-
write_rds(nhc_mega, "../data/NHC_watertemp.rds")
# Download NOAA data
# Created 10.05.2020
# AMC
library(tidyverse)
library(streamMetabolizer)
library(lubridate)
