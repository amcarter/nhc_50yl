NHC$pressure_Pa <- (NHC$pressure_kPa - NHC$AirPres_kPa)*1000
NHC$level_m <- sensor_offsets[sensor_offsets$site == "NHC", ]$offset_cm/100 +
NHC$pressure_Pa/(998*9.8)
UNHC$pressure_Pa <- (UNHC$pressure_kPa-UNHC$AirPres_kPa)*1000
UNHC$U.pressure_Pa<- (UNHC$UNHC.pressure_kPa-UNHC$AirPres_kPa)*1000
UNHC$level_m <- sensor_offsets[sensor_offsets$site=="NHC",]$offset_cm/100 +
UNHC$pressure_Pa/(998*9.8)
UNHC$U.level_m <- sensor_offsets[sensor_offsets$site=="UNHC",]$offset_cm/100 +
UNHC$U.pressure_Pa/(998*9.8)
UNHC$U.level_m[UNHC$U.level_m<0.24]<-NA
UNHC
# Calculate discharge from rating curves
# level = a * Q ^ b
m<-nls(level_m ~ a*discharge_cms^b,
data=ZQdat[ZQdat$site=="NHC",2:3],start=list(a=1,b=1))
a.NHC <- summary(m)$coefficients[1]
b.NHC <- summary(m)$coefficients[2]#Summary of the regression statistics
plot(ZQdat$discharge_cms[ZQdat$site=="NHC"], ZQdat$level_m[ZQdat$site=="NHC"], xlab="Q", ylab="z", main="NHC", xlim = c(0,100), ylim = c(.9,2))
lines(seq(.1,100, by=.1), a.NHC*seq(.1,100, by=.1)^b.NHC)
m <- nls(discharge_cms ~ (a * exp(b * level_m)),
data = ZQdat[ZQdat$site == "NHC",2:3 ],
start = list(a = 1, b = 1))
a.NHC.e <- summary(m)$coefficients[1]
b.NHC.e <- summary(m)$coefficients[2]#Summary of the regression statistics
lines(seq(.1,100, by=.1), log(seq(.1,100, by=.1)/a.NHC.e)/b.NHC.e)
NHC$discharge_m3s <- (NHC$level_m/a.NHC.e)^(1/b.NHC.e)
NHC$discharge_m3s[which(NHC$discharge_m3s>=500)] <- NA
m<-nls(level_m ~ a*discharge_cms^b,
data=ZQdat[ZQdat$site=="UNHC",2:3],start=list(a=1,b=1))
a.UNHC <- summary(m)$coefficients[1]
b.UNHC <- summary(m)$coefficients[2]#Summary of the regression statistics
plot(ZQdat$discharge_cms[ZQdat$site=="UNHC"], ZQdat$level_m[ZQdat$site=="UNHC"], xlab="Q", ylab="z", main="UNHC")
lines(seq(.1,3, by=.1), a.UNHC*seq(.1,3, by=.1)^b.UNHC)
UNHC$NHC_Q_cms <- (UNHC$level_m/a.NHC)^(1/b.NHC)
UNHC$UNHC_Q_cms <- (UNHC$U.level_m/a.UNHC)^(1/b.UNHC)
Qdat <- UNHC %>% select(DateTime_UTC, AirPres_kPa, AirTemp_C,NHC_Q_cms, UNHC_Q_cms)
Qdat$NHC_Q_cms <- na.approx(Qdat$NHC_Q_cms, na.rm=FALSE, maxgap=12)
Qdat$UNHC_Q_cms <- na.approx(Qdat$UNHC_Q_cms, na.rm=FALSE, maxgap=12)
plot(Qdat$UNHC_Q_cms[1:36300], Qdat$NHC_Q_cms[8:36307],
xlab = "UNHC Q", ylab = "NHC Q",log="xy")#, ylim = c(0,100), xlim = c(0,400), log = "xy")
mQ <- glm(log(NHC_Q_cms[7:36371])~log(UNHC_Q_cms[1:36365]), data=Qdat)
a=summary(mQ)$coefficients[1,1]
b=summary(mQ)$coefficients[2,1]
abline(a,b , col = "red")
Qdat$predNHC_Q <- exp(a+b*log(Qdat$UNHC_Q_cms))
Qdat$predUNHC_Q <- exp((log(Qdat$NHC_Q_cms)-a)/b)
Qdat$notes <- as.character(NA)
Qdat$notes[is.na(Qdat$NHC_Q_cms)&!is.na(Qdat$predNHC_Q)]<- "modeled NHC Q"
Qdat$notes[is.na(Qdat$UNHC_Q_cms)&!is.na(Qdat$predUNHC_Q)]<- "modeled UNHC Q"
NHC_gaps <- rle_custom(is.na(Qdat$NHC_Q_cms))
UNHC_gaps <- rle_custom(is.na(Qdat$UNHC_Q_cms))
# fill in and plot modeled data
Qdat$NHC_modQ_cms <- Qdat$NHC_Q_cms
Qdat$NHC_modQ_cms[is.na(Qdat$NHC_Q_cms)] <- Qdat$predNHC_Q[is.na(Qdat$NHC_Q_cms)]
Qdat$UNHC_modQ_cms <- Qdat$UNHC_Q_cms
Qdat$UNHC_modQ_cms[is.na(Qdat$UNHC_Q_cms)] <- Qdat$predUNHC_Q[is.na(Qdat$UNHC_Q_cms)]
plot(Qdat$DateTime_UTC, Qdat$NHC_modQ_cms, log="y", main = "NHC")
points(Qdat$DateTime_UTC[Qdat$notes=="modeled NHC Q"], Qdat$NHC_modQ_cms[Qdat$notes=="modeled NHC Q"], col = "red")
plot(Qdat$DateTime_UTC, Qdat$UNHC_modQ_cms, log="y", main = "UNHC")
points(Qdat$DateTime_UTC[Qdat$notes=="modeled UNHC Q"], Qdat$UNHC_modQ_cms[Qdat$notes=="modeled UNHC Q"], col = "red")
# find endpoints of measured and modeled data in the gaps
NHC_gaps <- NHC_gaps[NHC_gaps$values==1,]
UNHC_gaps <- UNHC_gaps[UNHC_gaps$values==1,]
# Don't allow interpolated discharge to be lower than NHC min flow
NHCmin <- min(Qdat$NHC_Q_cms, na.rm=T)
m<- min(Qdat$predNHC_Q, na.rm=T)
t <- which(Qdat$predNHC_Q==m)
for(i in 1:nrow(NHC_gaps)){
a<- NHC_gaps[i,]$starts
b <- NHC_gaps[i,]$stops
if(a==1) next
startdiff <- Qdat$NHC_Q_cms[a-1] - Qdat$predNHC_Q[a]
if(b==nrow(Qdat)){
enddiff <- startdiff
} else{
enddiff <- Qdat$NHC_Q_cms[b+1] - Qdat$predNHC_Q[b]
}
if(is.na(startdiff)||is.na(enddiff)) next
diffQ <- seq(startdiff, enddiff, length.out=NHC_gaps[i,]$lengths)
if(t %in% seq(a, b)){
tmp1 <- seq(startdiff,(NHCmin-Qdat$predNHC_Q[t]), length.out=(t-a))
tmp2 <- seq((NHCmin-Qdat$predNHC_Q[t]), enddiff, length.out=(b-t+1))
diffQ <- c(tmp1,tmp2)
}
Qdat$NHC_modQ_cms[a:b]<- Qdat$predNHC_Q[a:b]+diffQ
}
# snap UNHC gaps
# Don't allow interpolated discharge to be lower than NHC min flow
UNHCmin <- min(Qdat$UNHC_Q_cms, na.rm=T)
m<- min(Qdat$predNHC_Q, na.rm=T)
t <- which(Qdat$predNHC_Q==m)
for(i in 1:nrow(UNHC_gaps)){
a<- UNHC_gaps[i,]$starts
b <- UNHC_gaps[i,]$stops
startdiff <- Qdat$UNHC_Q_cms[a-1] - Qdat$predUNHC_Q[a]
if(b==nrow(Qdat)){
enddiff <- startdiff
} else{
enddiff <- Qdat$UNHC_Q_cms[b+1] - Qdat$predUNHC_Q[b]
}
if(is.na(startdiff)||is.na(enddiff)) next
diffQ <- seq(startdiff, enddiff, length.out=NHC_gaps[i,]$lengths)
Qdat$UNHC_modQ_cms[a:b]<- Qdat$predUNHC_Q[a:b]+diffQ
}
# double check that everything looks okay
plot(Qdat$DateTime_UTC, Qdat$NHC_modQ_cms, log="y", main = "NHC")
points(Qdat$DateTime_UTC[Qdat$notes=="modeled NHC Q"], Qdat$NHC_modQ_cms[Qdat$notes=="modeled NHC Q"], col = "red")
plot(Qdat$DateTime_UTC, Qdat$UNHC_modQ_cms, log="y", main = "UNHC")
points(Qdat$DateTime_UTC[Qdat$notes=="modeled UNHC Q"], Qdat$UNHC_modQ_cms[Qdat$notes=="modeled UNHC Q"], col = "red")
NHC_UNHC_Q_interp <- select(Qdat, DateTime_UTC, AirPres_kPa, AirTemp_C,NHC_Q_cms,UNHC_Q_cms, notes)
write_csv(NHC_UNHC_Q_interp, "C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/data/streampulse/raw/NHC_UNHC_Q_dat.csv")
# Add modeled Q for NHC sites to a dataframe with columns for each site to interpolate
newQdat <- data.frame(matrix(NA, nrow=nrow(Qdat), ncol = (1+nrow(sites))))
colnames(newQdat)<- c("DateTime_UTC",paste(sites$sitecode, "Q", sep="."))
newQdat$DateTime_UTC <- Qdat$DateTime_UTC
newQdat$NHC.Q <- Qdat$NHC_modQ_cms
newQdat$UNHC.Q <- Qdat$UNHC_modQ_cms
for(i in which(!is.na(newQdat$NHC.Q))){
df <- data.frame(Q = c(newQdat$NHC.Q[i], newQdat$UNHC.Q[i]), area = c(wsAreas$ws_area.km2[c(1,7)]))
m <- glm(Q~area, data=df)
Qnew <- summary(m)$coefficients[1,1]+summary(m)$coefficients[2,1]*sites$ws_area.km2[2:6]
newQdat[i,3:7] <-Qnew
}
newQdat
plot(newQdat$DateTime_UTC, newQdat$NHC.Q)
newQdat2 <- full_join(newQdat, Qdat[,c(1,2,3,8)], by="DateTime_UTC")
plot(newQdat2$DateTime_UTC, newQdat2$NHC.Q)
newQdat <- full_join(newQdat, Qdat[,c(1,2,3,8)], by="DateTime_UTC")
write_csv(newQdat, path = "siteData/interpolatedQ_allsites.csv")
Qdat <- read_csv("siteData/interpolatedQ_allsites.csv")
plot(Qdat$DateTime_UTC, Qdat$NHC.Q)
filelist <- list.files("metabolism/raw")
filelist
i=2
dat <- read_csv(paste0("metabolism/raw/",filelist[i]))
sitename <- dat$site[1]
lat <- sites$latitude[sites$sitecode==sitename]
lon <- sites$longitude[sites$sitecode==sitename]
sensor_offset <- sites$sensor_offset_m[sites$sitecode==sitename]
if("AirPres_kPa"%in% colnames(dat)){dat<- select(dat, -AirPres_kPa)}
if("AirTemp_C"%in% colnames(dat)){dat<- select(dat, -AirTemp_C)}
# remove leading and ending NAs
w <- which(!is.na(dat$DO_mgL))
dat <- dat[min(w):max(w), ]
#Load discharge data
Qname <- paste(sitename, "Q", sep=".")
Q <- Qdat[,c(1,2,11,which(colnames(Qdat)==Qname))]
colnames(Q) <- c("DateTime_UTC","AirPres_kPa", "AirTemp_C","discharge_m3s")
Q
dat <- left_join(dat, Q, by="DateTime_UTC")
dat
plot(dat$DateTime_UTC, dat$discharge_m3s)
#Convert datetime to solar time
dat$DateTime_EST <- with_tz(dat$DateTime_UTC, tz="EST") # convert to EST timezone
dat$solar.time <- calc_solar_time(dat$DateTime_EST, longitude=lon)
# Calculate DO saturation, depth, light
dat$AirPres_mbar <- dat$AirPres_kPa*10
dat$DO.sat <- calc_DO_sat(dat$WaterTemp_C, dat$AirPres_mbar,
salinity.water = 0, model = "garcia-benson")
# This number is probably not very representative and
# needs to be changed based on field data
dat$depth <- calc_depth(dat$discharge_m3s)
dat$light <- calc_light(dat$solar.time, latitude=lat,longitude=lon)
pressure_Pa <- (dat$WaterPres_kPa-dat$AirPres_kPa)*1000
dat$level_m <- sensor_offset + pressure_Pa/(998*9.8)
dat
plot(dat$solar.time, dat$DO.sat)
plot(dat$solar.time, dat$WaterTemp_C)
plot(dat$solar.time, dat$AirPres_mbar)
Qdat
plot(Qdat$AirPres_kPa)
Qdat[which(Qdat$AirPres_kPa>106), ]$AirPres_kPa
Qdat[which(Qdat$AirPres_kPa>106), ]$AirPres_kPa <- NA
Qdat
Qname
Q <- Qdat %>% select (DateTime_UTC, AirPres_kPa, AirTemp_C, discharge_m3s = Qname)
Q
Qname
Q <- Qdat %>% select (DateTime_UTC, AirPres_kPa, AirTemp_C,
discharge_m3s = all_of(Qname))
Q
dat <- read_csv(paste0("metabolism/raw/",filelist[i]))
sitename <- dat$site[1]
lat <- sites$latitude[sites$sitecode==sitename]
lon <- sites$longitude[sites$sitecode==sitename]
sensor_offset <- sites$sensor_offset_m[sites$sitecode==sitename]
if("AirPres_kPa"%in% colnames(dat)){dat<- select(dat, -AirPres_kPa)}
if("AirTemp_C"%in% colnames(dat)){dat<- select(dat, -AirTemp_C)}
# remove leading and ending NAs
w <- which(!is.na(dat$DO_mgL))
dat <- dat[min(w):max(w), ]
#Load discharge data
Qname <- paste(sitename, "Q", sep=".")
Q <- Qdat %>% select (DateTime_UTC, AirPres_kPa, AirTemp_C,
discharge_m3s = all_of(Qname))
dat <- left_join(dat, Q, by="DateTime_UTC")
#Convert datetime to solar time
dat$DateTime_EST <- with_tz(dat$DateTime_UTC, tz="EST") # convert to EST timezone
dat$solar.time <- calc_solar_time(dat$DateTime_EST, longitude=lon)
# Calculate DO saturation, depth, light
dat$AirPres_mbar <- dat$AirPres_kPa*10
dat$DO.sat <- calc_DO_sat(dat$WaterTemp_C, dat$AirPres_mbar,
salinity.water = 0, model = "garcia-benson")
# This number is probably not very representative and
# needs to be changed based on field data
dat$depth <- calc_depth(dat$discharge_m3s)
dat$light <- calc_light(dat$solar.time, latitude=lat,longitude=lon)
pressure_Pa <- (dat$WaterPres_kPa-dat$AirPres_kPa)*1000
dat$level_m <- sensor_offset + pressure_Pa/(998*9.8)
dat <- dat %>%
select(-DateTime_UTC, -AirPres_mbar, -AirPres_kPa,
-AirTemp_C, -WaterPres_kPa) %>%
mutate(DO.obs = DO_mgL,
temp.water = WaterTemp_C,
discharge = discharge_m3s)
plot(dat$DO.sat)
dat$DO.sat)
for(i in 1:length(filelist)){
dat <- read_csv(paste0("metabolism/raw/",filelist[i]))
sitename <- dat$site[1]
lat <- sites$latitude[sites$sitecode==sitename]
lon <- sites$longitude[sites$sitecode==sitename]
sensor_offset <- sites$sensor_offset_m[sites$sitecode==sitename]
if("AirPres_kPa"%in% colnames(dat)){dat<- select(dat, -AirPres_kPa)}
if("AirTemp_C"%in% colnames(dat)){dat<- select(dat, -AirTemp_C)}
# remove leading and ending NAs
w <- which(!is.na(dat$DO_mgL))
dat <- dat[min(w):max(w), ]
#Load discharge data
Qname <- paste(sitename, "Q", sep=".")
Q <- Qdat %>% select (DateTime_UTC, AirPres_kPa, AirTemp_C,
discharge_m3s = all_of(Qname))
dat <- left_join(dat, Q, by="DateTime_UTC")
#Convert datetime to solar time
dat$DateTime_EST <- with_tz(dat$DateTime_UTC, tz="EST") # convert to EST timezone
dat$solar.time <- calc_solar_time(dat$DateTime_EST, longitude=lon)
# Calculate DO saturation, depth, light
dat$AirPres_mbar <- dat$AirPres_kPa*10
dat$DO.sat <- calc_DO_sat(dat$WaterTemp_C, dat$AirPres_mbar,
salinity.water = 0, model = "garcia-benson")
# This number is probably not very representative and
# needs to be changed based on field data
dat$depth <- calc_depth(dat$discharge_m3s)
dat$light <- calc_light(dat$solar.time, latitude=lat,longitude=lon)
# Calculate Level data from water pressure
# Depth = pressure_Pa = kg/ms2/(density_kg/m3*gravity_m/s2)
# density is temperature dependent, for now I am assuming it's just 998 kg/m3
pressure_Pa <- (dat$WaterPres_kPa-dat$AirPres_kPa)*1000
dat$level_m <- sensor_offset + pressure_Pa/(998*9.8)
dat <- dat %>%
select(-DateTime_UTC, -AirPres_mbar, -AirPres_kPa,
-AirTemp_C, -WaterPres_kPa) %>%
mutate(DO.obs = DO_mgL,
temp.water = WaterTemp_C,
discharge = discharge_m3s)
write_csv(dat, paste0("metabolism/processed/",sitename,".csv"))
}
NHC <- read_metdata("NHC")
PM <- read_metdata("PM")
CBP <- read_metdata("CBP")
WB <- read_metdata("WB")
WBP <- read_metdata("WBP")
PWC <- read_metdata("PWC")
UNHC <- read_metdata("UNHC")
#Visualize the data #####
dat <- NHC
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- PM
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- CBP
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- WB
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- WBP
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- PWC
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
#Visualize the data #####
dat <- UNHC
dat %>% unitted::v() %>%
mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%
select(solar.time, starts_with('DO')) %>%
gather(type, DO.value, starts_with('DO')) %>%
mutate(units=ifelse(type == 'DO.pctsat', 'DO\n(% sat)', 'DO\n(mg/L)')) %>%
ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
labels <- c(depth='depth\n(m)', temp.water='water temp\n(deg C)',
light='PAR\n(umol m^-2 s^-1)', discharge='Q\n(cms)')
dat %>% unitted::v() %>%
select(solar.time, depth, temp.water, light, discharge) %>%
gather(type, value, depth, temp.water, light, discharge) %>%
mutate(
type=ordered(type, levels=c('depth','temp.water','light','discharge')),
units=ordered(labels[type], unname(labels))) %>%
ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +
facet_grid(units ~ ., scale='free_y') + theme_bw() +
scale_color_discrete('variable')
## Set bayes specs
bayes_name_new <- mm_name(type='bayes', pool_K600="binned",
err_obs_iid=TRUE, err_proc_iid = TRUE,
ode_method = "trapezoid", deficit_src='DO_mod',
engine='stan')
bayes_name_linear <- mm_name(type='bayes', pool_K600="linear",
err_obs_iid=TRUE, err_proc_iid = TRUE,
ode_method = "trapezoid", deficit_src='DO_mod',
engine='stan')
## Based on range of log daily Q
Qrange <- c(min(log(NHC$discharge), na.rm=T),quantile(log(NHC$discharge), .98, na.rm=T))
Qrange
bayes_specs_NHC$K600_lnQ_nodes_centers <- c(-13, -11, -9, -7, -5, -3, -1, 0, 2)
sites <- read_csv("siteData/NHCsite_metadata.csv")
NHC
## NHC ####
site <- "NHC"
sites
## Based on Pete Raymond's data
slope <- sites[sitecode==site, ]$slope
## Based on Pete Raymond's data
slope <- sites[sites$sitecode==site, ]$slope
slope
meanlogNHC <- 4.77+0.55*log(slope)+(-0.52*(log(median(NHC$depth))))
meanlogNHC
median(NHC$depth, na.rm = T)
meanlogNHC <- 4.77+0.55*log(slope)+(-0.52*(log(median(NHC$depth, na.rm = T))))
meanlogNHC
## Based on range of log daily Q
Qrange <- c(quantile(log(NHC$discharge),.02, na.rm=T),
quantile(log(NHC$discharge), .98, na.rm=T))
Qrange
set_up_model <- function(dat, site, bayes_name){
## Set bayes specs
bayes_specs <- specs(bayes_name)
## Based on range of log daily Q
Qrange <- c(quantile(log(dat$discharge),.02, na.rm=T),
quantile(log(dat$discharge), .98, na.rm=T))
bayes_specs$K600_lnQ_nodes_centers <- seq(Qrange[1], Qrange[2], length=7)
## Based on Pete Raymond's data
slope <- sites[sites$sitecode==site, ]$slope
meanlog <- 4.77+0.55*log(slope)+(-0.52*(log(median(dat$depth, na.rm = T))))
bayes_specs$K600_lnQ_nodes_meanlog <- c(rep(meanlog, 7))
bayes_specs$K600_lnQ_nodes_sdlog <- c(rep(0.7, 7))
## Change sigma
bayes_specs$K600_daily_sigma_sigma <- 0.05
return(bayes_specs)
}
set_up_model <- function(dat, site, bayes_name){
## Set bayes specs
bayes_specs <- specs(bayes_name)
## Based on range of log daily Q
Qrange <- c(quantile(log(dat$discharge),.02, na.rm=T),
quantile(log(dat$discharge), .98, na.rm=T))
bayes_specs$K600_lnQ_nodes_centers <- seq(Qrange[1], Qrange[2], length=7)
## Based on Pete Raymond's data
slope <- sites[sites$sitecode==site, ]$slope
meanlog <- 4.77+0.55*log(slope)+(-0.52*(log(median(dat$depth, na.rm = T))))
bayes_specs$K600_lnQ_nodes_meanlog <- c(rep(meanlog, 7))
bayes_specs$K600_lnQ_nodes_sdlog <- c(rep(0.7, 7))
## Change sigma
bayes_specs$K600_daily_sigma_sigma <- 0.05
return(bayes_specs)
}
####################
## Run Models
###################
bayes_specs_NHC <- set_up_model(NHC, "NHC", bayes_name_new)
bayes_specs_NHC
####################
## Run Models
###################
bayes_specs_NHC <- set_up_model(NHC, "NHC", bayes_name_new)
bayes_specs_PM <- set_up_model(PM, "PM", bayes_name_new)
bayes_specs_CBP <- set_up_model(CBP, "CBP", bayes_name_new)
bayes_specs_WB <- set_up_model(WB, "WB", bayes_name_new)
bayes_specs_WBP <- set_up_model(WBP, "WBP", bayes_name_new)
bayes_specs_PWC <- set_up_model(PWC, "PWC", bayes_name_new)
bayes_specs_UNHC <- set_up_model(UNHC, "UNHC", bayes_name_new)
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code/")
nldas <- read_csv("data/nldas.csv")
nldas
nldas <- read_csv("data/nldas.csv") %>%
dplyr::select(datetime = DateTime, value = '1', variable)
ggplot(nldas, aes(x=datetime, y = value)) +
geom_line() +
facet_wrap(.~variable)
nldas <- read_csv("data/nldas.csv") %>%
dplyr::select(datetime = DateTime, value = '1', variable) %>%
filter(!variable %in% c("wind_speed", "surface_downwelling_shortwave_flux_in_air"))
ggplot(nldas, aes(x=datetime, y = value)) +
geom_line() +
facet_wrap(.~variable, "free_y" )
ggplot(nldas, aes(x=datetime, y = value)) +
geom_line() +
facet_wrap(.~variable, scales = "free_y" )
nldas <- read_csv("data/nldas.csv") %>%
dplyr::select(datetime = DateTime, value = '1', variable) #%>%
ggplot(nldas, aes(x=datetime, y = value)) +
geom_line() +
facet_wrap(.~variable, scales = "free_y" )
